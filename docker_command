Docker Command 

1. Docker Installation & Version Check
 docker info 
 docker --version 

 2. Start, Stop & Restart Containers
 docker run <image>        # Run a new container from an image
docker run -it <image>    # Run interactively (for debugging)
docker start <container>  # Start a stopped container
docker stop <container>   # Stop a running container
docker restart <container> # Restart a container
docker kill <container>   # Force-stop a container
docker pause <container>  # Pause a running container
docker unpause <container> # Resume a paused container

3. Executing Commands in Running Containers
docker exec -it <container> bash       # Open a bash shell inside a running container
docker logs <container>                # View logs of a container
docker top <container>                 # Show running processes in a container
docker stats <container>               # Display real-time resource usage
docker inspect <container>             # Show detailed info about a container


4. Listing & Removing Containers
docker ps                 # List running containers
docker ps -a              # List all containers (including stopped)
docker rm <container>     # Remove a specific container
docker rm -f <container>  # Force remove a running container
docker container prune    # Remove all stopped containers

5. Listing & Removing Images
 docker images             # List all images
docker rmi <image>        # Remove a specific image
docker rmi -f <image>     # Force remove an image
docker rmi -f $(docker images -aq) # Remove all images
docker image prune        # Remove unused images

6. Building & Tagging Images
docker build -t <image-name> .  # Build an image from a Dockerfile
docker tag <image> <new-name>   # Tag an image

7. Managing Volumes
docker volume create <volume-name>  # Create a volume
docker volume ls                    # List all volumes
docker volume rm <volume-name>       # Remove a specific volume
docker volume prune                  # Remove all unused volumes

8. Managing Networks
docker network ls                     # List all networks
docker network create <network-name>   # Create a custom network
docker network inspect <network-name>  # Inspect a network
docker network connect <network> <container>  # Connect a container to a network
docker network disconnect <network> <container>  # Disconnect a container from a network
docker network rm <network-name>       # Remove a network
docker network prune                   # Remove all unused networks

9. Working with Docker Hub
docker login                           # Login to Docker Hub
docker logout                          # Logout from Docker Hub
docker pull <image>                    # Pull an image from Docker Hub
docker push <image>                    # Push an image to Docker Hub
docker tag <image> <username>/<repo>:<tag>  # Tag an image before pushing



Advance Contain Mangement 

1.Run Containers with Resource Limits 

docker run --memory=500m --cpus="1.5" <image> --> Limits memory to 500MB and CPU to 1.5 cores.



2. Run Container in Detached Mode (-d) with Auto-Restart

docker run -d --restart=always --name=myapp <image> -->Runs the container in the background and restarts it if it stops



3. Copy Files Between Host and Container

docker cp <container_id>:/path/to/file /host/path
docker cp /host/path <container_id>:/path/to/file



4. Save and Load Images Locally

docker save -o myimage.tar <image_name>
docker load -i myimage.tar



5. Run Container in Read-Only Mode 

docker run --read-only <image> --> Ensures the container cannot modify files inside itself.


6. Advanced Networking

docker network create mynetwork
docker run -d --net=mynetwork --name=mycontainer <image> --> Creates an isolated network for communication between containers.
docker network inspect <network_name>
 
-- Connect a Running Container to a New Network
docker network connect <network_name> <container_id>



7.  Logging and Monitoring

docker logs -f <container_id>
docker stats --> Shows real-time CPU, memory, and network usage.

